#include <sys/socket.h>
#include <sys/types.h>
#include <sys/time.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <resolv.h>
#include <errno.h>
#include <strings.h>

#define MAX_CLIENTS 500
#define BUFFER 1024

int max(int a, int b)
{
    return a > b ? a : b;
}

int max_value(int arr[])
{
    int i = 0;
    int max = 0;
    for (; i < MAX_CLIENTS; i++)
    {
        if (arr[i] == -1)
            break;
        if (max < arr[i])
        {
            max = arr[i];
        }
    }
    return max;
}

void errase(int arr[], int ind)
{
    int i = ind;
    for (; i < MAX_CLIENTS; i++)
    {
        arr[ind] = arr[ind + 1];
        if (arr[ind] == -1)
            break;
    }
}

int main(int argc, char *argv[])
{
    int port;
    if (argc == 1)
    {
        port = 50000;
    }
    else
    {
        port = atoi(argv[1]);
        if (port < 50000 || port > 55000)
        {
            printf("Incorrect port\n");
            port = 50000;
        }
    }

    int sd;
    int clients[MAX_CLIENTS + 1];
    char buff[BUFFER];
    int bytes_read;

    sd = socket(PF_INET, SOCK_STREAM, 0);
    fcntl(sd, F_SETFL, SOCK_STREAM, 0);
    struct sockaddr_in addr;
    bzero(&addr, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    int done = 0;
    do
    {
        addr.sin_port = htons(port);
        if (bind(sd, (struct sockaddr*)&addr, sizeof(addr)) != 0)
        {
            if (errno != EADDRINUSE)
                perror("Bind AF_INET");
        }
        else
        {
            done = 1;
            printf("Used port: %d\n", port);
        }
        port = port < 55000 ? port + 1 : 50000;
    }
    while (!done);
    if (listen(sd, 20) != 0)
    {
        perror("Listen");
    }
    clients[0] = -1;
    int cur_ind = 0;
    while (1)
    {
        int i = 0;
        int clientsd;
        fd_set readset;
        FD_ZERO(&readset);
        FD_SET(sd, &readset);

        for (; i < MAX_CLIENTS; i++)
        {
            if (clients[i] == -1)
                break;
            FD_SET(clients[i], &readset);
            printf("%d\n", clients[i]);
        }

        struct timeval timeout;
        timeout.tv_sec = 15;
        timeout.tv_usec = 0;

        int mx = max(sd, max_value(clients));
        if (select(mx + 1, &readset, NULL, NULL, &timeout) <= 0)
        {
            perror("select");
        }

        if (FD_ISSET(sd, &readset))
        {
            clientsd = accept(sd, NULL, NULL);
            if (clientsd < 0)
            {
                perror("accept");
            }
            else
            {
                fcntl(clientsd, F_SETFL, O_NONBLOCK);
                if (cur_ind < MAX_CLIENTS)
                {
                    clients[cur_ind++] = clientsd;
                    clients[cur_ind] = -1;
                }
            }
        }
        i = 0;
        for (; i < MAX_CLIENTS; i++)
        {
            if (clients[i] == -1)
                break;
            if (FD_ISSET(clients[i], &readset))
            {

                bytes_read = recv(clients[i], buff, BUFFER, 0);
                if (bytes_read <= 0)
                {
                    close(clients[i]);
                    errase(clients, i);
                    cur_ind--;
                }
                else
                {
                    send(clients[i], buff, bytes_read, 0);
                }
            }
        }
    }
    return 0;
}